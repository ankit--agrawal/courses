function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
%Forward Propogation
a1 = [ones(m,1) X];
z2 = (a1 * Theta1');
a2 = [ones(size(z2,1),1) sigmoid(z2)]; %a2 = g(z2) "don't forget to add bias"
h_theta = sigmoid(a2*Theta2'); %z3 = a2*Theta2'
a3 = h_theta; %a3 = g(z3)
y_mat = eye(num_labels)(y,:);
J =(1/m)*(-sum(sum(y_mat .* log(h_theta))) - sum(sum((1-y_mat) .* (log(1-h_theta))))); %non-regularized cost

%Regularized term
regularized = (lambda/(2*m))*((sum(sum(Theta1(:,2:end).^2))) + (sum(sum(Theta2(:,2:end).^2))));

%Regularized Cost
J = J + regularized;

%Back Propogation
d3 = a3 - y_mat; %h(x) - y "compute delta3"
d2 = (d3*Theta2(:,2:end)).*sigmoidGradient(z2); %delta3*Theta2 .* g(z(2)) "compute delta2 and ignoring the bias"

%Accumulating the delta and computing the unregularized gradient
D2 = d3' * a2; %delta(l+1)*a(l)
Theta2_grad = (1/m)*D2;

%Remember the output layer doesn't have bias so no need of d3(:,2:end)

D1 = d2' * a1;
Theta1_grad = (1/m)*D1;

%Adding regularization to the gradient
%method 1
Theta1_grad(:,2:end) = Theta1_grad(:,2:end) + (lambda/m)*(Theta1(:,2:end));
Theta2_grad(:,2:end) = Theta2_grad(:,2:end) + (lambda/m)*(Theta2(:,2:end));

%method 2
%reg1_grad = (lambda/m)*(Theta1(:));
%reg2_grad = (lambda/m)*(Theta2(:));
%reg1_grad(:,1) = 0;
%reg2_grad(:,1) = 0;
%Theta1_grad(:) = Theta1_grad(:) + reg1_grad(:);
%Theta2_grad(:) = Theta2_grad(:) + reg2_grad(:);
% -------------------------------------------------------------
% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
